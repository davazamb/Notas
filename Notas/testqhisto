
---

### Pasos para implementar

#### 1. **Crear el proyecto del servicio**
Utiliza la plantilla de `Worker Service`:
```bash
dotnet new worker -n PurgaTablaQuartzService
```

---

#### 2. **Agregar las dependencias necesarias**
Añade las siguientes bibliotecas para trabajar con Quartz.NET y Entity Framework Core:
```bash
dotnet add package Quartz
dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
```

---

#### 3. **Configurar el contexto de EF Core**
Define el contexto y las clases para las tablas de la base de datos:
```csharp
using Microsoft.EntityFrameworkCore;

public class AppDbContext : DbContext
{
    public DbSet<Registro> TablaPrincipal { get; set; }
    public DbSet<Registro> TablaHistorial { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("TuCadenaDeConexionSQLServer");
    }
}

public class Registro
{
    public int Id { get; set; }
    public DateTime FechaCreacion { get; set; }
    public string Datos { get; set; }
}
```

---

#### 4. **Definir el trabajo de Quartz**
Crea una clase para la tarea de purga:
```csharp
using System;
using System.Linq;
using System.Threading.Tasks;

public class PurgaTablaJob : IJob
{
    private readonly AppDbContext _context;

    public PurgaTablaJob(AppDbContext context)
    {
        _context = context;
    }

    public async Task Execute(IJobExecutionContext context)
    {
        var fechaLimite = DateTime.Now.AddMonths(-3);

        // Obtener registros a purgar
        var registrosAPurgar = _context.TablaPrincipal
            .Where(r => r.FechaCreacion < fechaLimite)
            .ToList();

        if (registrosAPurgar.Any())
        {
            // Mover a TablaHistorial
            _context.TablaHistorial.AddRange(registrosAPurgar);

            // Eliminar de TablaPrincipal
            _context.TablaPrincipal.RemoveRange(registrosAPurgar);

            // Guardar cambios en la base de datos
            await _context.SaveChangesAsync();
        }
    }
}
```

---

#### 5. **Configurar Quartz en el servicio**
En el archivo `Program.cs`, configura Quartz para programar el trabajo con una expresión cron diaria:
```csharp
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Quartz;
using Quartz.Impl;
using Quartz.Spi;

public class Program
{
    public static void Main(string[] args)
    {
        Host.CreateDefaultBuilder(args)
            .ConfigureServices((hostContext, services) =>
            {
                services.AddDbContext<AppDbContext>();

                // Configuración de Quartz
                services.AddQuartz(q =>
                {
                    q.UseMicrosoftDependencyInjectionJobFactory();

                    // Configurar el trabajo y cron
                    var jobKey = new JobKey("PurgaTablaJob");
                    q.AddJob<PurgaTablaJob>(opts => opts.WithIdentity(jobKey));
                    q.AddTrigger(opts => opts
                        .ForJob(jobKey)
                        .WithIdentity("PurgaTablaTrigger")
                        .WithCronSchedule("0 0 0 * * ?")); // Ejecución diaria a medianoche
                });

                services.AddQuartzHostedService(q => q.WaitForJobsToComplete = true);
            })
            .Build()
            .Run();
    }
}
```

---

#### 6. **Registrar el servicio en Windows**
Compila el proyecto y registra el servicio utilizando `sc.exe`:
```bash
sc create PurgaTablaQuartzService binPath= "C:\Ruta\PurgaTablaQuartzService.exe"
```

----------
""""""""""""""""""""

OTRO
--------------------------

Aquí tienes un enfoque para crear un **microservicio en .NET Core 8** que realice una purga diaria de registros en una tabla de base de datos, conserve solo los últimos 3 meses y migre los registros purgados a una tabla de historial utilizando Quartz.NET para programación cron y LINQ para consultas. Los microservicios son una excelente opción por su modularidad y escalabilidad.

---

### Pasos para implementar

#### 1. **Crear el proyecto del microservicio**
Genera un proyecto Web API, ya que los microservicios suelen comunicarse mediante HTTP:
```bash
dotnet new webapi -n PurgaTablaMicroservice
```

---

#### 2. **Agregar dependencias necesarias**
Añade los paquetes para trabajar con bases de datos y Quartz.NET:
```bash
dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Quartz
```

---

#### 3. **Configurar el contexto de la base de datos**
Define tus tablas y el contexto de EF Core:
```csharp
using Microsoft.EntityFrameworkCore;

public class AppDbContext : DbContext
{
    public DbSet<Registro> TablaPrincipal { get; set; }
    public DbSet<Registro> TablaHistorial { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("TuCadenaDeConexionSQLServer");
    }
}

public class Registro
{
    public int Id { get; set; }
    public DateTime FechaCreacion { get; set; }
    public string Datos { get; set; }
}
```

---

#### 4. **Configurar Quartz.NET**
Define la tarea de purga y registra Quartz en el microservicio.

##### Clase de tarea para purga:
```csharp
using System;
using System.Linq;
using System.Threading.Tasks;
using Quartz;

public class PurgaTablaJob : IJob
{
    private readonly AppDbContext _context;

    public PurgaTablaJob(AppDbContext context)
    {
        _context = context;
    }

    public async Task Execute(IJobExecutionContext context)
    {
        var fechaLimite = DateTime.Now.AddMonths(-3);

        // LINQ para obtener registros a purgar
        var registrosAPurgar = _context.TablaPrincipal
            .Where(r => r.FechaCreacion < fechaLimite)
            .ToList();

        if (registrosAPurgar.Any())
        {
            // Migrar registros a la tabla de historial
            _context.TablaHistorial.AddRange(registrosAPurgar);

            // Eliminar registros de la tabla principal
            _context.TablaPrincipal.RemoveRange(registrosAPurgar);

            // Guardar cambios en la base de datos
            await _context.SaveChangesAsync();
        }
    }
}
```

##### Registrar Quartz en `Program.cs`:
```csharp
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Quartz;

var builder = WebApplication.CreateBuilder(args);

// Registrar el contexto de EF Core
builder.Services.AddDbContext<AppDbContext>();

// Configurar Quartz
builder.Services.AddQuartz(q =>
{
    q.UseMicrosoftDependencyInjectionJobFactory();

    // Configurar el trabajo y el cron
    var jobKey = new JobKey("PurgaTablaJob");
    q.AddJob<PurgaTablaJob>(opts => opts.WithIdentity(jobKey));
    q.AddTrigger(opts => opts
        .ForJob(jobKey)
        .WithIdentity("PurgaTablaTrigger")
        .WithCronSchedule("0 0 0 * * ?")); // Ejecución diaria a medianoche
});

builder.Services.AddQuartzHostedService(q => q.WaitForJobsToComplete = true);

var app = builder.Build();

app.MapGet("/", () => "Microservicio de purga de tabla en ejecución.");

app.Run();
```

---

#### 5. **Pruebas y despliegue**
- **Pruebas locales:** Ejecuta el microservicio y verifica su comportamiento.
- **Despliegue:** Implementa el servicio en contenedores Docker, Kubernetes o cualquier plataforma de microservicios.

##### Dockerfile para contenerización:
```dockerfile
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /app
EXPOSE 80

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src
COPY . .
RUN dotnet build "PurgaTablaMicroservice.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "PurgaTablaMicroservice.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "PurgaTablaMicroservice.dll"]
```

---

