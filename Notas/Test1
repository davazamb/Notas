-----DELETE ----
[TestClass]
public class PurgeServiceTests
{
    private Mock<IUnitOfWork> _unitOfWorkMock;
    private Mock<IGlobalReportRepository> _reportRepoMock;
    private Mock<ILogger<PurgeService>> _loggerMock;
    private PurgeService _service;

    [TestInitialize]
    public void Setup()
    {
        _unitOfWorkMock = new Mock<IUnitOfWork>();
        _reportRepoMock = new Mock<IGlobalReportRepository>();
        _loggerMock = new Mock<ILogger<PurgeService>>();

        _unitOfWorkMock.Setup(u => u.GetGlobalReportRepository())
                       .Returns(_reportRepoMock.Object);

        _service = new PurgeService(_unitOfWorkMock.Object, _loggerMock.Object);
    }

    [TestMethod]
    public async Task DeletePurgeRecordAsync_ShouldThrow_WhenTypeIsInvalid()
    {
        var request = new SearchPurgeRequest { TypePurge = "ARCHIVE" };

        var response = await _service.DeletePurgeRecordAsync(request);

        Assert.IsFalse(response.Success);
        Assert.AreEqual("The purge type does not match the delete", response.Message);
    }

    [TestMethod]
    public async Task DeletePurgeRecordAsync_ShouldThrow_WhenRecordNotFound()
    {
        var request = new SearchPurgeRequest
        {
            TypePurge = "DELETEPURGE",
            Id = 1,
            DateInsert = DateTime.UtcNow
        };

        _reportRepoMock.Setup(r => r.GetAsync(It.IsAny<Expression<Func<GlobalReport, bool>>>()))
                       .ReturnsAsync((GlobalReport)null);

        var response = await _service.DeletePurgeRecordAsync(request);

        Assert.IsFalse(response.Success);
        Assert.IsTrue(response.Message.Contains("Error GlobalReportId not found"));
    }

    [TestMethod]
    public async Task DeletePurgeRecordAsync_ShouldReturnTrue_WhenSuccessful()
    {
        var request = new SearchPurgeRequest
        {
            TypePurge = "DELETEPURGE",
            Id = 1,
            DateInsert = DateTime.UtcNow
        };

        var report = new GlobalReport { GrId = 1, GrDateInsert = request.DateInsert };

        _reportRepoMock.Setup(r => r.GetAsync(It.IsAny<Expression<Func<GlobalReport, bool>>>()))
                       .ReturnsAsync(report);

        _reportRepoMock.Setup(r => r.DeleteAsync(report)).ReturnsAsync(true);
        _unitOfWorkMock.Setup(u => u.SaveChangeAsync()).Returns(Task.CompletedTask);

        var response = await _service.DeletePurgeRecordAsync(request);

        Assert.IsTrue(response.Success);
        Assert.IsTrue(response.Data);
    }
}



------List

[TestClass]
public class PurgeServiceQueryTests
{
    private Mock<IUnitOfWork> _unitOfWorkMock;
    private Mock<IGlobalReportRepository> _reportRepoMock;
    private Mock<ILogger<PurgeService>> _loggerMock;
    private PurgeService _service;

    [TestInitialize]
    public void Setup()
    {
        _unitOfWorkMock = new Mock<IUnitOfWork>();
        _reportRepoMock = new Mock<IGlobalReportRepository>();
        _loggerMock = new Mock<ILogger<PurgeService>>();

        _unitOfWorkMock.Setup(u => u.GetGlobalReportRepository())
                       .Returns(_reportRepoMock.Object);

        _service = new PurgeService(_unitOfWorkMock.Object, _loggerMock.Object);
    }

    [TestMethod]
    public async Task GetPurgeRecordAsync_ShouldReturnError_WhenTypeIsInvalid()
    {
        var request = new SearchPurgeRequest { TypePurge = "ARCHIVE" };

        var result = await _service.GetPurgeRecordAsync(request);

        Assert.IsFalse(result.Success);
        Assert.AreEqual("The purge type does not match the query", result.Message);
    }

    [TestMethod]
    public async Task GetPurgeRecordAsync_ShouldReturnResults_WhenRecordsExist()
    {
        var request = new SearchPurgeRequest
        {
            TypePurge = "DELETEPURGE",
            DateInsert = new DateTime(2024, 1, 1)
        };

        var reports = new List<GlobalReport>
        {
            new GlobalReport { GrId = 1, GrDateInsert = request.DateInsert },
            new GlobalReport { GrId = 2, GrDateInsert = request.DateInsert }
        };

        _reportRepoMock.Setup(r => r.GetAllAsync(It.IsAny<Expression<Func<GlobalReport, bool>>>()))
                       .ReturnsAsync(reports);

        var result = await _service.GetPurgeRecordAsync(request);

        Assert.IsTrue(result.Success);
        Assert.AreEqual(2, result.Data.Count());
    }

    [TestMethod]
    public async Task GetPurgeRecordAsync_ShouldReturnEmptyList_WhenNoRecordsFound()
    {
        var request = new SearchPurgeRequest
        {
            TypePurge = "DELETEPURGE",
            DateInsert = new DateTime(2024, 1, 1)
        };

        _reportRepoMock.Setup(r => r.GetAllAsync(It.IsAny<Expression<Func<GlobalReport, bool>>>()))
                       .ReturnsAsync(new List<GlobalReport>());

        var result = await _service.GetPurgeRecordAsync(request);

        Assert.IsTrue(result.Success);
        Assert.IsNotNull(result.Data);
        Assert.AreEqual(0, result.Data.Count());
    }

    [TestMethod]
    public async Task GetPurgeRecordAsync_ShouldHandleException_Gracefully()
    {
        var request = new SearchPurgeRequest
        {
            TypePurge = "DELETEPURGE",
            DateInsert = new DateTime(2024, 1, 1)
        };

        _reportRepoMock.Setup(r => r.GetAllAsync(It.IsAny<Expression<Func<GlobalReport, bool>>>()))
                       .ThrowsAsync(new Exception("Database error"));

        var result = await _service.GetPurgeRecordAsync(request);

        Assert.IsFalse(result.Success);
        Assert.IsTrue(result.Message.Contains("Error"));
    }
}

-------


[TestClass]
public class DataPurgeJobTests
{
    private Mock<IServiceProvider> _mockServiceProvider;
    private Mock<IServiceScope> _mockScope;
    private Mock<IServiceScopeFactory> _mockScopeFactory;
    private Mock<IOptions<DataPurgeSettings>> _mockOptions;
    private Mock<IDataPurgeService> _mockDataPurgeService;
    private DataPurgeJob _job;

    [TestInitialize]
    public void Setup()
    {
        _mockServiceProvider = new Mock<IServiceProvider>();
        _mockScope = new Mock<IServiceScope>();
        _mockScopeFactory = new Mock<IServiceScopeFactory>();
        _mockOptions = new Mock<IOptions<DataPurgeSettings>>();
        _mockDataPurgeService = new Mock<IDataPurgeService>();

        // Configuración de DataPurgeSettings
        var settings = new DataPurgeSettings
        {
            PurgeThresholdDays = 30,
            Tables = new List<DataPurgeTableConfig>
            {
                new DataPurgeTableConfig { Name = "TestTable", Enabled = true }
            }
        };
        _mockOptions.Setup(o => o.Value).Returns(settings);

        // Simular el scope y los servicios
        var services = new List<IDataPurgeService> { _mockDataPurgeService.Object };
        _mockServiceProvider.Setup(sp => sp.CreateScope()).Returns(_mockScope.Object);
        _mockScope.Setup(s => s.ServiceProvider).Returns(_mockServiceProvider.Object);
        _mockServiceProvider.Setup(sp => sp.GetService(typeof(IEnumerable<IDataPurgeService>)))
                            .Returns(services);

        _mockDataPurgeService.Setup(s => s.TableName).Returns("TestTable");

        _job = new DataPurgeJob(_mockServiceProvider.Object, _mockOptions.Object);
    }

    [TestMethod]
    public async Task Execute_WhenTableIsEnabled_CallsPurgeOldDataAsync()
    {
        // Arrange
        var context = Mock.Of<IJobExecutionContext>();

        // Act
        await _job.Execute(context);

        // Assert
        _mockDataPurgeService.Verify(s => s.PurgeOldDataAsync(It.IsAny<DateTime>()), Times.Once);
    }
}
_-------

[TestClass]
public class DataPurgeJobTests
{
    private Mock<IServiceProvider> _mockServiceProvider;
    private Mock<IServiceScope> _mockScope;
    private Mock<IOptions<DataPurgeSettings>> _mockOptions;
    private Mock<IDataPurgeService> _mockDataPurgeService;
    private DataPurgeJob _job;

    [TestInitialize]
    public void Setup()
    {
        _mockServiceProvider = new Mock<IServiceProvider>();
        _mockScope = new Mock<IServiceScope>();
        _mockOptions = new Mock<IOptions<DataPurgeSettings>>();
        _mockDataPurgeService = new Mock<IDataPurgeService>();

        // Configuración de DataPurgeSettings
        var settings = new DataPurgeSettings
        {
            PurgeThresholdDays = 30,
            Tables = new List<DataPurgeTableConfig>
            {
                new DataPurgeTableConfig { Name = "TestTable", Enabled = true }
            }
        };
        _mockOptions.Setup(o => o.Value).Returns(settings);

        // Simular el scope y los servicios
        var services = new List<IDataPurgeService> { _mockDataPurgeService.Object };

        // Simular el IServiceScope
        _mockScope.Setup(s => s.ServiceProvider).Returns(_mockServiceProvider.Object);
        _mockServiceProvider.Setup(sp => sp.CreateScope()).Returns(_mockScope.Object);

        // Simular GetRequiredService<IEnumerable<IDataPurgeService>>()
        _mockServiceProvider
            .Setup(sp => sp.GetRequiredService(typeof(IEnumerable<IDataPurgeService>)))
            .Returns(services);

        // Simular GetRequiredService<IDataPurgeService>() como fallback
        _mockServiceProvider
            .Setup(sp => sp.GetRequiredService(typeof(IDataPurgeService)))
            .Returns(_mockDataPurgeService.Object);

        _mockDataPurgeService.Setup(s => s.TableName).Returns("TestTable");

        _job = new DataPurgeJob(_mockServiceProvider.Object, _mockOptions.Object);
    }

    [TestMethod]
    public async Task Execute_WhenTableIsEnabled_CallsPurgeOldDataAsync()
    {
        // Arrange
        var context = Mock.Of<IJobExecutionContext>();

        // Act
        await _job.Execute(context);

        // Assert
        _mockDataPurgeService.Verify(s => s.PurgeOldDataAsync(It.IsAny<DateTime>()), Times.Once);
    }
}


-------



[TestClass]
public class DataPurgeJobTests
{
    private Mock<IServiceProvider> _mockServiceProvider;
    private Mock<IServiceScopeFactory> _mockScopeFactory;
    private Mock<IServiceScope> _mockScope;
    private Mock<IOptions<DataPurgeSettings>> _mockOptions;
    private Mock<IDataPurgeService> _mockDataPurgeService;
    private DataPurgeJob _job;

    [TestInitialize]
    public void Setup()
    {
        _mockServiceProvider = new Mock<IServiceProvider>();
        _mockScopeFactory = new Mock<IServiceScopeFactory>();
        _mockScope = new Mock<IServiceScope>();
        _mockOptions = new Mock<IOptions<DataPurgeSettings>>();
        _mockDataPurgeService = new Mock<IDataPurgeService>();

        // Configuración de DataPurgeSettings
        var settings = new DataPurgeSettings
        {
            PurgeThresholdDays = 30,
            Tables = new List<DataPurgeTableConfig>
            {
                new DataPurgeTableConfig { Name = "TestTable", Enabled = true }
            }
        };
        _mockOptions.Setup(o => o.Value).Returns(settings);

        // Simular el IServiceScope
        _mockScope.Setup(s => s.ServiceProvider).Returns(_mockServiceProvider.Object);
        _mockScopeFactory.Setup(f => f.CreateScope()).Returns(_mockScope.Object);

        // Registrar el factory en el ServiceProvider
        _mockServiceProvider
            .Setup(sp => sp.GetService(typeof(IServiceScopeFactory)))
            .Returns(_mockScopeFactory.Object);

        // Simular GetRequiredService<IEnumerable<IDataPurgeService>>()
        var services = new List<IDataPurgeService> { _mockDataPurgeService.Object };
        _mockServiceProvider
            .Setup(sp => sp.GetRequiredService(typeof(IEnumerable<IDataPurgeService>)))
            .Returns(services);

        // Simular GetRequiredService<IDataPurgeService>() como fallback
        _mockServiceProvider
            .Setup(sp => sp.GetRequiredService(typeof(IDataPurgeService)))
            .Returns(_mockDataPurgeService.Object);

        _mockDataPurgeService.Setup(s => s.TableName).Returns("TestTable");

        _job = new DataPurgeJob(_mockServiceProvider.Object, _mockOptions.Object);
    }

    [TestMethod]
    public async Task Execute_WhenTableIsEnabled_CallsPurgeOldDataAsync()
    {
        // Arrange
        var context = Mock.Of<IJobExecutionContext>();

        // Act
        await _job.Execute(context);

        // Assert
        _mockDataPurgeService.Verify(s => s.PurgeOldDataAsync(It.IsAny<DateTime>()), Times.Once);
    }
}

----4-----

[TestClass]
public class DataPurgeJobTests
{
    private Mock<IServiceProvider> _mockServiceProvider;
    private Mock<IServiceScopeFactory> _mockScopeFactory;
    private Mock<IServiceScope> _mockScope;
    private Mock<IOptions<DataPurgeSettings>> _mockOptions;
    private Mock<IDataPurgeService> _mockDataPurgeService;
    private DataPurgeJob _job;

    [TestInitialize]
    public void Setup()
    {
        _mockServiceProvider = new Mock<IServiceProvider>();
        _mockScopeFactory = new Mock<IServiceScopeFactory>();
        _mockScope = new Mock<IServiceScope>();
        _mockOptions = new Mock<IOptions<DataPurgeSettings>>();
        _mockDataPurgeService = new Mock<IDataPurgeService>();

        var settings = new DataPurgeSettings
        {
            PurgeThresholdDays = 30,
            Tables = new List<DataPurgeTableConfig>
            {
                new DataPurgeTableConfig { Name = "TestTable", Enabled = true }
            }
        };
        _mockOptions.Setup(o => o.Value).Returns(settings);

        // Simular el IServiceScope
        _mockScope.Setup(s => s.ServiceProvider).Returns(_mockServiceProvider.Object);
        _mockScopeFactory.Setup(f => f.CreateScope()).Returns(_mockScope.Object);

        // Registrar el factory en el ServiceProvider
        _mockServiceProvider
            .Setup(sp => sp.GetService(typeof(IServiceScopeFactory)))
            .Returns(_mockScopeFactory.Object);

        // Simular GetService(typeof(IEnumerable<IDataPurgeService>))
        var services = new List<IDataPurgeService> { _mockDataPurgeService.Object };
        _mockServiceProvider
            .Setup(sp => sp.GetService(typeof(IEnumerable<IDataPurgeService>)))
            .Returns(services);

        // Simular GetService(typeof(IDataPurgeService)) como fallback
        _mockServiceProvider
            .Setup(sp => sp.GetService(typeof(IDataPurgeService)))
            .Returns(_mockDataPurgeService.Object);

        _mockDataPurgeService.Setup(s => s.TableName).Returns("TestTable");

        _job = new DataPurgeJob(_mockServiceProvider.Object, _mockOptions.Object);
    }

    [TestMethod]
    public async Task Execute_WhenTableIsEnabled_CallsPurgeOldDataAsync()
    {
        // Arrange
        var context = Mock.Of<IJobExecutionContext>();

        // Act
        await _job.Execute(context);

        // Assert
        _mockDataPurgeService.Verify(s => s.PurgeOldDataAsync(It.IsAny<DateTime>()), Times.Once);
    }
}