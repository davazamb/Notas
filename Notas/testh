[TestClass]
public class ServicioTests
{
    private Mock<IRepositorio> _mockRepositorio;
    private IServicio _servicio;

    [TestInitialize]
    public void Setup()
    {
        _mockRepositorio = new Mock<IRepositorio>();
        _servicio = new Servicio(_mockRepositorio.Object);
    }

    [TestMethod]
    public async Task GetAllAsync_DeberiaRetornarDatos()
    {
        // Arrange
        var datosSimulados = new List<Entidad> { new Entidad { Id = 1, Nombre = "Ejemplo" } };
        _mockRepositorio
            .Setup(r => r.GetAllAsync())
            .ReturnsAsync(datosSimulados);

        // Act
        var resultado = await _servicio.GetAllAsync();

        // Assert
        Assert.IsNotNull(resultado);
        Assert.AreEqual(1, resultado.Count);
        Assert.AreEqual("Ejemplo", resultado.First().Nombre);
        _mockRepositorio.Verify(r => r.GetAllAsync(), Times.Once);
    }
}


--------



[TestClass]
public class ProductoServiceTests
{
    private Mock<IProductoRepository> _productoRepositoryMock;
    private ProductoService _productoService;

    [TestInitialize]
    public void Setup()
    {
        _productoRepositoryMock = new Mock<IProductoRepository>();
        _productoService = new ProductoService(_productoRepositoryMock.Object);
    }

    [TestMethod]
    public async Task ObtenerPorIdAsync_ProductoExiste_RetornaProducto()
    {
        // Arrange
        var productoId = 1;
        var productoEsperado = new Producto { Id = productoId, Nombre = "LÃ¡piz", Precio = 500 };

        _productoRepositoryMock
            .Setup(repo => repo.ObtenerPorIdAsync(productoId))
            .ReturnsAsync(productoEsperado);

        // Act
        var resultado = await _productoService.ObtenerPorIdAsync(productoId);

        // Assert
        Assert.IsNotNull(resultado);
        Assert.AreEqual(productoEsperado.Id, resultado.Id);
        Assert.AreEqual(productoEsperado.Nombre, resultado.Nombre);
    }
}