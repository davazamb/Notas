¬°Aqu√≠ lo tienes, David! üîß Este es el ejemplo **completo**, **desacoplado por m√©todos** y con soporte para **logs**, usando **.NET Core**, **Quartz.NET**, **Entity Framework Core**, y configuraci√≥n externa desde `appsettings.json`. Incluye todo: desde los modelos hasta la programaci√≥n del job.

---

## üìÅ `appsettings.json`

```json
{
  "PurgeSettings": {
    "MonthsToKeep": 3,
    "SourceConnection": "Data Source=source.db",
    "ArchiveConnection": "Data Source=archive.db",
    "Tables": [
      { "Source": "MainTableA", "Archive": "ArchiveTableA" },
      { "Source": "MainTableB", "Archive": "ArchiveTableB" },
      { "Source": "MainTableC", "Archive": "ArchiveTableC" }
    ]
  }
}
```

---

## ‚öôÔ∏è Clases de configuraci√≥n

```csharp
public class PurgeSettings
{
    public int MonthsToKeep { get; set; }
    public string SourceConnection { get; set; }
    public string ArchiveConnection { get; set; }
    public List<TableMapping> Tables { get; set; }
}

public class TableMapping
{
    public string Source { get; set; }
    public string Archive { get; set; }
}
```

---

## üßæ Entidad para Logging

```csharp
public class PurgeLog
{
    public int Id { get; set; }
    public string TableName { get; set; }
    public DateTime StartedAt { get; set; }
    public DateTime? EndedAt { get; set; }
    public int RecordsMoved { get; set; }
    public bool Success { get; set; }
    public string ErrorMessage { get; set; }
}
```

Incl√∫yelo en `ArchiveDbContext`:

```csharp
public DbSet<PurgeLog> PurgeLogs { get; set; }
```

---

## üß™ Servicio: `IPurgeService` y `PurgeService`

```csharp
public interface IPurgeService
{
    Task PurgeAllAsync();
}
```

```csharp
public class PurgeService : IPurgeService
{
    private readonly PurgeSettings _settings;
    private readonly IServiceScopeFactory _scopeFactory;

    public PurgeService(IOptions<PurgeSettings> settings, IServiceScopeFactory scopeFactory)
    {
        _settings = settings.Value;
        _scopeFactory = scopeFactory;
    }

    public async Task PurgeAllAsync()
    {
        var purgeDate = DateTime.UtcNow.AddMonths(-_settings.MonthsToKeep);

        using var scope = _scopeFactory.CreateScope();
        var sourceDb = scope.ServiceProvider.GetRequiredService<SourceDbContext>();
        var archiveDb = scope.ServiceProvider.GetRequiredService<ArchiveDbContext>();

        foreach (var table in _settings.Tables)
        {
            var log = new PurgeLog
            {
                TableName = table.Source,
                StartedAt = DateTime.UtcNow,
                Success = false
            };

            try
            {
                log.RecordsMoved = await PurgeTableAsync(table.Source, purgeDate, sourceDb, archiveDb);
                log.Success = true;
            }
            catch (Exception ex)
            {
                log.ErrorMessage = ex.Message;
            }
            finally
            {
                log.EndedAt = DateTime.UtcNow;
                await archiveDb.PurgeLogs.AddAsync(log);
            }
        }

        await archiveDb.SaveChangesAsync();
        await sourceDb.SaveChangesAsync();
    }

    private async Task<int> PurgeTableAsync(string tableName, DateTime purgeDate, SourceDbContext source, ArchiveDbContext archive)
    {
        return tableName switch
        {
            "MainTableA" => await PurgeAsync(source.MainTableA, archive.ArchiveTableA, x => x.CreatedAt <= purgeDate),
            "MainTableB" => await PurgeAsync(source.MainTableB, archive.ArchiveTableB, x => x.Timestamp <= purgeDate),
            "MainTableC" => await PurgeAsync(source.MainTableC, archive.ArchiveTableC, x => x.InsertDate <= purgeDate),
            _ => throw new InvalidOperationException($"Tabla no reconocida: {tableName}")
        };
    }

    private async Task<int> PurgeAsync<T>(DbSet<T> sourceSet, DbSet<T> archiveSet, Expression<Func<T, bool>> filter) where T : class
    {
        var oldRecords = await sourceSet.Where(filter).ToListAsync();
        await archiveSet.AddRangeAsync(oldRecords);
        sourceSet.RemoveRange(oldRecords);
        return oldRecords.Count;
    }
}
```

---

## ‚è∞ Job Quartz desacoplado

```csharp
public class DataPurgeJob : IJob
{
    private readonly IPurgeService _purgeService;

    public DataPurgeJob(IPurgeService purgeService)
    {
        _purgeService = purgeService;
    }

    public async Task Execute(IJobExecutionContext context)
    {
        await _purgeService.PurgeAllAsync();
    }
}
```

---

## üß∑ Registro en `Program.cs`

```csharp
builder.Services.Configure<PurgeSettings>(builder.Configuration.GetSection("PurgeSettings"));

builder.Services.AddDbContext<SourceDbContext>(options =>
    options.UseSqlite(builder.Configuration["PurgeSettings:SourceConnection"]));

builder.Services.AddDbContext<ArchiveDbContext>(options =>
    options.UseSqlite(builder.Configuration["PurgeSettings:ArchiveConnection"]));

builder.Services.AddScoped<IPurgeService, PurgeService>();

builder.Services.AddQuartz(q =>
{
    var jobKey = new JobKey("DataPurgeJob");
    q.AddJob<DataPurgeJob>(opts => opts.WithIdentity(jobKey));
    q.AddTrigger(t => t
        .ForJob(jobKey)
        .WithSimpleSchedule(s => s.WithIntervalInHours(24).RepeatForever()));
});

builder.Services.AddQuartzHostedService();
```

---

Este dise√±o est√° listo para crecer: puedes a√±adir transacciones por tabla, pol√≠ticas de reintento, m√©tricas o incluso paralelismo por grupo de tablas.

¬øQuieres que lo preparemos con `ILogger`, exportaci√≥n de logs o integrarlo con Hangfire como alternativa? Lo llevamos al siguiente nivel cuando t√∫ quieras üß†üí•
