¬°Vamos con todo, David! Aqu√≠ tienes un **proyecto completo y funcional** con:

- ‚úÖ Quartz.NET para ejecuci√≥n programada
- ‚úÖ Servicio de purga con respaldo y logging
- ‚úÖ Configuraci√≥n externa v√≠a `appsettings.json`
- ‚úÖ Purga en cascada de `Facturas`, `DetalleFactura` e `ImagenFactura`

---

## üìÅ `appsettings.json`

```json
{
  "PurgeSettings": {
    "BackupFolder": "Respaldos",
    "PurgeEnabled": true,
    "LogEnabled": true,
    "Tables": [
      {
        "Name": "Facturas",
        "IncludeDetails": true,
        "IncludeImages": true
      }
    ]
  }
}
```

---

## üß© Modelos

```csharp
public interface IHasDateCreated
{
    DateTime FechaCreacion { get; set; }
}

public class Factura : IHasDateCreated
{
    public int Id { get; set; }
    public DateTime FechaCreacion { get; set; }
    public ICollection<DetalleFactura> Detalles { get; set; }
    public ICollection<ImagenFactura> Imagenes { get; set; }
}

public class DetalleFactura
{
    public int Id { get; set; }
    public int FacturaId { get; set; }
    public Factura Factura { get; set; }
}

public class ImagenFactura
{
    public int Id { get; set; }
    public int FacturaId { get; set; }
    public Factura Factura { get; set; }
}

public class PurgeLog
{
    public int Id { get; set; }
    public string Tabla { get; set; }
    public int RegistrosMovidos { get; set; }
    public DateTime FechaCorte { get; set; }
    public DateTime FechaEjecucion { get; set; }
}
```

---

## üß† Clases de configuraci√≥n

```csharp
public class PurgeSettings
{
    public string BackupFolder { get; set; }
    public bool PurgeEnabled { get; set; }
    public bool LogEnabled { get; set; }
    public List<TableSetting> Tables { get; set; }
}

public class TableSetting
{
    public string Name { get; set; }
    public bool IncludeDetails { get; set; }
    public bool IncludeImages { get; set; }
}
```

---

## üíº Servicio de purga din√°mico

```csharp
public interface IDynamicPurgeService
{
    Task PurgeAsync(DateTime cutoffDate, CancellationToken token);
}
```

```csharp
public class FacturaCascadePurgeService : IDynamicPurgeService
{
    private readonly PurgeSettings _settings;
    private readonly SourceDbContext _source;
    private readonly TargetDbContext _target;

    public FacturaCascadePurgeService(
        IOptions<PurgeSettings> options,
        SourceDbContext source,
        TargetDbContext target)
    {
        _settings = options.Value;
        _source = source;
        _target = target;
    }

    public async Task PurgeAsync(DateTime cutoffDate, CancellationToken token)
    {
        if (!_settings.PurgeEnabled) return;

        foreach (var table in _settings.Tables)
        {
            if (table.Name != "Facturas") continue;

            var facturas = await _source.Facturas
                .Include(f => table.IncludeDetails ? f.Detalles : null)
                .Include(f => table.IncludeImages ? f.Imagenes : null)
                .Where(f => f.FechaCreacion <= cutoffDate)
                .ToListAsync(token);

            if (!facturas.Any()) continue;

            await ExportarRespaldoAsync(facturas, table.Name);
            _target.Facturas.AddRange(facturas);
            _source.Facturas.RemoveRange(facturas);

            await _target.SaveChangesAsync(token);
            await _source.SaveChangesAsync(token);

            if (_settings.LogEnabled)
            {
                _source.PurgeLogs.Add(new PurgeLog
                {
                    Tabla = table.Name,
                    RegistrosMovidos = facturas.Count,
                    FechaCorte = cutoffDate,
                    FechaEjecucion = DateTime.UtcNow
                });
                await _source.SaveChangesAsync(token);
            }
        }
    }

    private async Task ExportarRespaldoAsync<T>(IEnumerable<T> data, string nombreTabla)
    {
        var folder = Path.Combine(_settings.BackupFolder, DateTime.UtcNow.ToString("yyyyMMdd"));
        Directory.CreateDirectory(folder);

        string json = JsonSerializer.Serialize(data, new JsonSerializerOptions { WriteIndented = true });
        string path = Path.Combine(folder, $"{nombreTabla}_{DateTime.UtcNow:HHmmss}.json");

        await File.WriteAllTextAsync(path, json);
    }
}
```

---

## ‚è± Job Quartz

```csharp
public class FacturaPurgeJob : IJob
{
    private readonly IDynamicPurgeService _purgeService;

    public FacturaPurgeJob(IDynamicPurgeService purgeService)
    {
        _purgeService = purgeService;
    }

    public Task Execute(IJobExecutionContext context)
    {
        var cutoff = DateTime.UtcNow.AddMonths(-3);
        return _purgeService.PurgeAsync(cutoff, context.CancellationToken);
    }
}
```

---

## üß∑ `Program.cs`

```csharp
builder.Services.Configure<PurgeSettings>(builder.Configuration.GetSection("PurgeSettings"));
builder.Services.AddScoped<IDynamicPurgeService, FacturaCascadePurgeService>();

builder.Services.AddQuartz(q =>
{
    q.UseMicrosoftDependencyInjectionScopedJobFactory();

    JobKey jobKey = new("FacturaPurgeJob");
    q.AddJob<FacturaPurgeJob>(opts => opts.WithIdentity(jobKey));
    q.AddTrigger(t => t
        .ForJob(jobKey)
        .WithIdentity("FacturaTrigger")
        .WithCronSchedule("0 30 2 * * ?")); // 2:30 AM diario
});

builder.Services.AddQuartzHostedService(opt => opt.WaitForJobsToComplete = true);
```

---

## ‚úÖ Resultado Final

- Se ejecuta el job a las **2:30 AM**
- Se purga `Facturas`, `DetalleFactura` e `ImagenFactura` seg√∫n configuraci√≥n
- Se guarda **respaldo JSON** y se escribe un **registro en BD**
- Puedes activar/desactivar logs, respaldos, o a√±adir m√°s tablas ¬°solo editando el `appsettings.json`!

---

¬øTe gustar√≠a que lo empaquetemos en una soluci√≥n lista para subir a GitHub o NuGet como base de purga reutilizable? Tambi√©n puedo ayudarte a automatizar pruebas o crear una UI para visualizar logs.
