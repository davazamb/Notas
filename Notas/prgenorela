¬°Entendido, David! Vamos a enfocarnos en un **ejemplo completo** para una purga **de varias tablas sin relaci√≥n entre ellas** usando:

- ‚úÖ Quartz.NET para ejecuci√≥n programada
- ‚úÖ EF Core para acceso a datos
- ‚úÖ Servicio gen√©rico de purga
- ‚úÖ Configuraci√≥n externa v√≠a `appsettings.json`
- ‚úÖ Exportaci√≥n JSON + logging
- ‚úÖ Independencia entre tablas

---

## üóÇÔ∏è Estructura de Tablas (sin relaci√≥n entre s√≠)

```csharp
public class LogSistema
{
    public int Id { get; set; }
    public DateTime FechaRegistro { get; set; }
    public string Nivel { get; set; }
    public string Mensaje { get; set; }
}

public class HistorialCorreo
{
    public int Id { get; set; }
    public string Email { get; set; }
    public DateTime EnviadoEn { get; set; }
    public string Asunto { get; set; }
}

public class RegistroAuditoria
{
    public int Id { get; set; }
    public string Usuario { get; set; }
    public DateTime FechaEvento { get; set; }
    public string Modulo { get; set; }
}
```

---

## üß† Interface de Entidad con Fecha

```csharp
public interface IFechaPurgable
{
    DateTime FechaReferencia { get; }
}

public class LogSistema : IFechaPurgable
{
    public DateTime FechaReferencia => FechaRegistro;
    // otros campos...
}
public class HistorialCorreo : IFechaPurgable
{
    public DateTime FechaReferencia => EnviadoEn;
}
public class RegistroAuditoria : IFechaPurgable
{
    public DateTime FechaReferencia => FechaEvento;
}
```

---

## ‚öôÔ∏è appsettings.json

```json
{
  "PurgeSettings": {
    "BackupFolder": "Respaldos",
    "LogEnabled": true,
    "PurgeEnabled": true,
    "Entities": [
      { "Name": "LogSistema" },
      { "Name": "HistorialCorreo" },
      { "Name": "RegistroAuditoria" }
    ]
  }
}
```

---

## üîß Configuraci√≥n y clases

```csharp
public class EntityToPurge
{
    public string Name { get; set; }
}

public class PurgeSettings
{
    public string BackupFolder { get; set; }
    public bool LogEnabled { get; set; }
    public bool PurgeEnabled { get; set; }
    public List<EntityToPurge> Entities { get; set; }
}
```

---

## üõ† Servicio de Purga Gen√©rico

```csharp
public interface IPurgeService
{
    Task PurgeAsync(DateTime cutoff, CancellationToken token);
}
```

```csharp
public class PurgeService : IPurgeService
{
    private readonly SourceDbContext _source;
    private readonly TargetDbContext _target;
    private readonly PurgeSettings _settings;

    public PurgeService(IOptions<PurgeSettings> options, SourceDbContext source, TargetDbContext target)
    {
        _settings = options.Value;
        _source = source;
        _target = target;
    }

    public async Task PurgeAsync(DateTime cutoff, CancellationToken token)
    {
        if (!_settings.PurgeEnabled) return;

        foreach (var entity in _settings.Entities)
        {
            switch (entity.Name)
            {
                case "LogSistema":
                    await PurgeEntityAsync<LogSistema>(_source.LogSistema, _target.LogSistema, cutoff, token);
                    break;
                case "HistorialCorreo":
                    await PurgeEntityAsync<HistorialCorreo>(_source.HistorialCorreo, _target.HistorialCorreo, cutoff, token);
                    break;
                case "RegistroAuditoria":
                    await PurgeEntityAsync<RegistroAuditoria>(_source.RegistroAuditoria, _target.RegistroAuditoria, cutoff, token);
                    break;
            }
        }
    }

    private async Task PurgeEntityAsync<T>(DbSet<T> sourceSet, DbSet<T> targetSet, DateTime cutoff, CancellationToken token)
        where T : class, IFechaPurgable
    {
        var registros = await sourceSet.Where(e => e.FechaReferencia <= cutoff).ToListAsync(token);
        if (!registros.Any()) return;

        await BackupAsync(registros, typeof(T).Name);
        targetSet.AddRange(registros);
        sourceSet.RemoveRange(registros);

        await _target.SaveChangesAsync(token);
        await _source.SaveChangesAsync(token);
    }

    private async Task BackupAsync<T>(IEnumerable<T> registros, string nombre)
    {
        var folder = Path.Combine(_settings.BackupFolder, DateTime.UtcNow:yyyyMMdd);
        Directory.CreateDirectory(folder);

        string json = JsonSerializer.Serialize(registros, new JsonSerializerOptions { WriteIndented = true });
        string path = Path.Combine(folder, $"{nombre}_{DateTime.UtcNow:HHmmss}.json");

        await File.WriteAllTextAsync(path, json);
    }
}
```

---

## ‚è± Job de Quartz

```csharp
public class PurgeJob : IJob
{
    private readonly IPurgeService _purgeService;

    public PurgeJob(IPurgeService purgeService)
    {
        _purgeService = purgeService;
    }

    public Task Execute(IJobExecutionContext context)
    {
        var cutoff = DateTime.UtcNow.AddMonths(-3);
        return _purgeService.PurgeAsync(cutoff, context.CancellationToken);
    }
}
```

---

## üß∑ Program.cs

```csharp
builder.Services.Configure<PurgeSettings>(builder.Configuration.GetSection("PurgeSettings"));
builder.Services.AddScoped<IPurgeService, PurgeService>();

builder.Services.AddQuartz(q =>
{
    q.UseMicrosoftDependencyInjectionScopedJobFactory();

    JobKey key = new("PurgeJob");
    q.AddJob<PurgeJob>(opts => opts.WithIdentity(key));
    q.AddTrigger(t => t
        .ForJob(key)
        .WithIdentity("PurgeTrigger")
        .WithCronSchedule("0 0 2 * * ?")); // Todos los d√≠as a las 2 AM
});

builder.Services.AddQuartzHostedService(opts => opts.WaitForJobsToComplete = true);
```

---

## ‚úÖ Resultado

- ‚úÖ Cada tabla se purga de forma **independiente**
- ‚úÖ Se exporta respaldo en JSON por tabla
- ‚úÖ Se controla todo v√≠a `appsettings.json`
- ‚úÖ C√≥digo limpio, mantenible y escalable

---

¬øTe gustar√≠a que incluya paginaci√≥n para conjuntos de datos muy grandes, o generar eventos en tiempo real para visualizaci√≥n web? Tambi√©n puedo ayudarte a desacoplar el backup a un sistema FTP o Azure Blob si te interesa.
